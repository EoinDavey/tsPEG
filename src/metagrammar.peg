// Meta grammar for parser

GRAM      := header=HDR? rules=RULEDEF+ $
HDR       := '---' content='((?!---)(.|\r\n|\n))*' '---'
RULEDEF   := _ namestart=@ name=NAME nameend=@ _ ':=' _ rule=RULE _
RULE      := head=ALT tail={_ '\|' _ alt=ALT }*
          .list = ALT[] { return [this.head, ...this.tail.map((x) => x.alt)]; }
ALT       := rulename=RULENAME? matches=MATCHSPEC+ attrs=ATTR*
MATCHSPEC := _ named={start=@ name=NAME _ '=' _}? rule=MATCH // TODO rename to match
RULENAME  := '<' name=NAME '>' _
MATCH     := SPECIAL | POSTOP
SPECIAL   := op='@'
POSTOP    := pre=PREOP op={ op='\+|\*|\?' | RANGESPEC }?
            .optional = boolean { return this.op?.kind === ASTKinds.POSTOP_$0_1 && this.op.op === '?';}
PREOP     := start=@ op='\&|!'? at=ATOM
// Negative lookahead is used here to allow no requirement for semicolons
// to denote end of rule definition
ATOM      := start=@ name=NAME !'\s*:='
           | match=STRLIT
           | '{' _ sub=RULE _ '}'
              .name = string | null { return null; }
           | EOF
EOF       := symb='\$'
ATTR      := _ '\.' name=NAME _ '=' _ type=TS_TYPE _ code=CODE_SECTION
NAME      := '[a-zA-Z_][a-zA-Z0-9_]*'
STRLIT    := start=@ '\'' val='([^\'\\]|(\\.))*' '\'' mods='[mius]*'
RANGESPEC := '\[\s*' a='[0-9]+' u={',\s*' b='[0-9]+'? }? '\s*\]'
             .a_val = number { return parseInt(this.a); }
             .b_val = number | null { return this.u !== null && this.u.b !== null ? parseInt(this.u.b) : null; }
             .lb = number { return this.a_val; }
             .ub = number { return this.b_val ?? (this.u !== null ? -1 : this.lb); }

// Whitespace definition includes traditional whitespace
// and // comments.
_         := '(?:\s|(?:\/\/.*(?:\r\n|\n|$)))*'

// Grammar to match TypeScript type defs

TS_TYPE := _ start=@ { TS_FUNCTION | TS_CONSTRUCTOR | TS_EXPR } end=@

TS_EXPR := _ TS_PRIM {_ '[&|]' TS_PRIM }*
TS_PRIM := {
    '\(' _ TS_TYPE _ '\)'
    | TS_TYPE_QUERY
    | TS_TYPE_REF
    | TS_PROPERTY_NAME
    | '\{' {_ TS_TYPE_MEMBER {_ '[;,]' _ TS_TYPE_MEMBER }* _ '[;,]?' }? _ '\}'
    | '\[' _ { _ TS_TYPE {_ ',' _ TS_TYPE}* }? _ '\]'
    } '\[\]'* // Optional trailing []s for array type

TS_TYPE_REF := _ NAME {'\.' NAME}* {_ TS_GENERIC_ARGS}?
TS_TYPE_QUERY := _ 'typeof' &_ _ NAME {'\.' NAME}*

TS_FUNCTION := _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ '=>' _ TS_TYPE
TS_CONSTRUCTOR := _ 'new' _ TS_FUNCTION

TS_GENERIC_PARAMS := _ '<' _ {TS_GENERIC_PARAM {_ ',' _ TS_GENERIC_PARAM}* }? _ '>'
TS_GENERIC_PARAM := _ NAME {_ 'extends' _ TS_TYPE}?
TS_GENERIC_ARGS := _ '<' _ {TS_TYPE {_ ',' _ TS_TYPE}* }? _ '>'

TS_PARAM_LIST := _ TS_REQUIRED_PARAMS {_ ',' _ TS_OPTIONAL_PARAMS}? {_ ',' _ TS_REST_PARAM}?
    | _ TS_OPTIONAL_PARAMS {_ ',' _ TS_REST_PARAM}?
    | _ TS_REST_PARAM

TS_REQUIRED_PARAMS := _ TS_REQUIRED_PARAM {_ ',' _ TS_REQUIRED_PARAM}*
TS_REQUIRED_PARAM := _ NAME _ ':' _ TS_TYPE

TS_OPTIONAL_PARAMS := _ TS_OPTIONAL_PARAM _ {',' _ TS_OPTIONAL_PARAM}*
TS_OPTIONAL_PARAM := _ NAME '\?' _ ':' _ TS_TYPE

TS_REST_PARAM := _ '\.\.\.' _ NAME _ ':' _ TS_TYPE

TS_TYPE_MEMBER := TS_PROPERTY_NAME '\??' _ ':' _ TS_TYPE
    | _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE
    | _ 'new' &_ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE
    | _ '\[' _ NAME _ ':' _ NAME _ '\]' _ ':' _ TS_TYPE
    | _ NAME '\??' _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE

TS_PROPERTY_NAME := NAME | TS_STRING | TS_NUM
TS_STRING := '"' val='([^"\\]|(\\.))*' '"'
    | '\'' val='([^\'\\]|(\\.))*' '\''
    | '`' val='([^`\\]|(\\.))*' '`'
TS_NUM := '-?[0-9]+(?:\.[0-9]+)?'

// Grammar to match code section without escaped braces
// Logic is based off braces can only appear without matching brace in strings.

CODE_SECTION := _ '\{' start=@ CODE_REC? end=@ _ '\}'
CODE_REC := { '[^{}\'"`]+' | TS_STRING | '\{' CODE_REC _ '\}' }*
