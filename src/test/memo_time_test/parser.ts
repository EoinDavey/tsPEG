/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* E0  := a=E1 op='a|b' b=E0 .value=number { return this.a.value + this.b.value }
*      | E1
* E1  := a=E2 op='c|d' b=E1 .value=number { return this.a.value + this.b.value }
*       | E2
* E2  := a=E3 op='e|f' b=E2 .value=number { return this.a.value + this.b.value }
*       | E3
* E3  := a=E4 op='g|h' b=E3 .value=number { return this.a.value + this.b.value }
*       | E4
* E4  := a=ATOM op='i|j' b=E4 .value=number { return this.a.value + this.b.value }
*       | ATOM
* ATOM := val=INT
*         .value=number { return this.val.value; }
*         | '\(' val=E0 '\)'
*         .value=number { return this.val.value; }
* INT  := val='[0-9]+'
*         .value=number { return parseInt(this.val); }
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    E0_1 = "E0_1",
    E0_2 = "E0_2",
    E1_1 = "E1_1",
    E1_2 = "E1_2",
    E2_1 = "E2_1",
    E2_2 = "E2_2",
    E3_1 = "E3_1",
    E3_2 = "E3_2",
    E4_1 = "E4_1",
    E4_2 = "E4_2",
    ATOM_1 = "ATOM_1",
    ATOM_2 = "ATOM_2",
    INT = "INT",
}
export type E0 = E0_1 | E0_2;
export class E0_1 {
    public kind: ASTKinds.E0_1 = ASTKinds.E0_1;
    public a: E1;
    public op: string;
    public b: E0;
    public value: number;
    constructor(a: E1, op: string, b: E0){
        this.a = a;
        this.op = op;
        this.b = b;
        this.value = ((): number => {
        return this.a.value + this.b.value
        })();
    }
}
export type E0_2 = E1;
export type E1 = E1_1 | E1_2;
export class E1_1 {
    public kind: ASTKinds.E1_1 = ASTKinds.E1_1;
    public a: E2;
    public op: string;
    public b: E1;
    public value: number;
    constructor(a: E2, op: string, b: E1){
        this.a = a;
        this.op = op;
        this.b = b;
        this.value = ((): number => {
        return this.a.value + this.b.value
        })();
    }
}
export type E1_2 = E2;
export type E2 = E2_1 | E2_2;
export class E2_1 {
    public kind: ASTKinds.E2_1 = ASTKinds.E2_1;
    public a: E3;
    public op: string;
    public b: E2;
    public value: number;
    constructor(a: E3, op: string, b: E2){
        this.a = a;
        this.op = op;
        this.b = b;
        this.value = ((): number => {
        return this.a.value + this.b.value
        })();
    }
}
export type E2_2 = E3;
export type E3 = E3_1 | E3_2;
export class E3_1 {
    public kind: ASTKinds.E3_1 = ASTKinds.E3_1;
    public a: E4;
    public op: string;
    public b: E3;
    public value: number;
    constructor(a: E4, op: string, b: E3){
        this.a = a;
        this.op = op;
        this.b = b;
        this.value = ((): number => {
        return this.a.value + this.b.value
        })();
    }
}
export type E3_2 = E4;
export type E4 = E4_1 | E4_2;
export class E4_1 {
    public kind: ASTKinds.E4_1 = ASTKinds.E4_1;
    public a: ATOM;
    public op: string;
    public b: E4;
    public value: number;
    constructor(a: ATOM, op: string, b: E4){
        this.a = a;
        this.op = op;
        this.b = b;
        this.value = ((): number => {
        return this.a.value + this.b.value
        })();
    }
}
export type E4_2 = ATOM;
export type ATOM = ATOM_1 | ATOM_2;
export class ATOM_1 {
    public kind: ASTKinds.ATOM_1 = ASTKinds.ATOM_1;
    public val: INT;
    public value: number;
    constructor(val: INT){
        this.val = val;
        this.value = ((): number => {
        return this.val.value;
        })();
    }
}
export class ATOM_2 {
    public kind: ASTKinds.ATOM_2 = ASTKinds.ATOM_2;
    public val: E0;
    public value: number;
    constructor(val: E0){
        this.val = val;
        this.value = ((): number => {
        return this.val.value;
        })();
    }
}
export class INT {
    public kind: ASTKinds.INT = ASTKinds.INT;
    public val: string;
    public value: number;
    constructor(val: string){
        this.val = val;
        this.value = ((): number => {
        return parseInt(this.val);
        })();
    }
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo): void {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$E0$memo.clear();
        this.$scope$E1$memo.clear();
        this.$scope$E2$memo.clear();
        this.$scope$E3$memo.clear();
        this.$scope$E4$memo.clear();
        this.$scope$ATOM$memo.clear();
        this.$scope$INT$memo.clear();
    }
    protected $scope$E0$memo: Map<number, [Nullable<E0>, PosInfo]> = new Map();
    protected $scope$E1$memo: Map<number, [Nullable<E1>, PosInfo]> = new Map();
    protected $scope$E2$memo: Map<number, [Nullable<E2>, PosInfo]> = new Map();
    protected $scope$E3$memo: Map<number, [Nullable<E3>, PosInfo]> = new Map();
    protected $scope$E4$memo: Map<number, [Nullable<E4>, PosInfo]> = new Map();
    protected $scope$ATOM$memo: Map<number, [Nullable<ATOM>, PosInfo]> = new Map();
    protected $scope$INT$memo: Map<number, [Nullable<INT>, PosInfo]> = new Map();
    public matchE0($$dpth: number, $$cr?: ErrorTracker): Nullable<E0> {
        return this.memoise(
            () => {
                return this.choice<E0>([
                    () => this.matchE0_1($$dpth + 1, $$cr),
                    () => this.matchE0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$E0$memo,
        );
    }
    public matchE0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E0_1> {
        return this.run<E0_1>($$dpth,
            () => {
                let $scope$a: Nullable<E1>;
                let $scope$op: Nullable<string>;
                let $scope$b: Nullable<E0>;
                let $$res: Nullable<E0_1> = null;
                if (true
                    && ($scope$a = this.matchE1($$dpth + 1, $$cr)) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:a|b)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.matchE0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new E0_1($scope$a, $scope$op, $scope$b);
                }
                return $$res;
            });
    }
    public matchE0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E0_2> {
        return this.matchE1($$dpth + 1, $$cr);
    }
    public matchE1($$dpth: number, $$cr?: ErrorTracker): Nullable<E1> {
        return this.memoise(
            () => {
                return this.choice<E1>([
                    () => this.matchE1_1($$dpth + 1, $$cr),
                    () => this.matchE1_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$E1$memo,
        );
    }
    public matchE1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E1_1> {
        return this.run<E1_1>($$dpth,
            () => {
                let $scope$a: Nullable<E2>;
                let $scope$op: Nullable<string>;
                let $scope$b: Nullable<E1>;
                let $$res: Nullable<E1_1> = null;
                if (true
                    && ($scope$a = this.matchE2($$dpth + 1, $$cr)) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:c|d)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.matchE1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new E1_1($scope$a, $scope$op, $scope$b);
                }
                return $$res;
            });
    }
    public matchE1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E1_2> {
        return this.matchE2($$dpth + 1, $$cr);
    }
    public matchE2($$dpth: number, $$cr?: ErrorTracker): Nullable<E2> {
        return this.memoise(
            () => {
                return this.choice<E2>([
                    () => this.matchE2_1($$dpth + 1, $$cr),
                    () => this.matchE2_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$E2$memo,
        );
    }
    public matchE2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E2_1> {
        return this.run<E2_1>($$dpth,
            () => {
                let $scope$a: Nullable<E3>;
                let $scope$op: Nullable<string>;
                let $scope$b: Nullable<E2>;
                let $$res: Nullable<E2_1> = null;
                if (true
                    && ($scope$a = this.matchE3($$dpth + 1, $$cr)) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:e|f)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.matchE2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new E2_1($scope$a, $scope$op, $scope$b);
                }
                return $$res;
            });
    }
    public matchE2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E2_2> {
        return this.matchE3($$dpth + 1, $$cr);
    }
    public matchE3($$dpth: number, $$cr?: ErrorTracker): Nullable<E3> {
        return this.memoise(
            () => {
                return this.choice<E3>([
                    () => this.matchE3_1($$dpth + 1, $$cr),
                    () => this.matchE3_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$E3$memo,
        );
    }
    public matchE3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E3_1> {
        return this.run<E3_1>($$dpth,
            () => {
                let $scope$a: Nullable<E4>;
                let $scope$op: Nullable<string>;
                let $scope$b: Nullable<E3>;
                let $$res: Nullable<E3_1> = null;
                if (true
                    && ($scope$a = this.matchE4($$dpth + 1, $$cr)) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:g|h)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.matchE3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new E3_1($scope$a, $scope$op, $scope$b);
                }
                return $$res;
            });
    }
    public matchE3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E3_2> {
        return this.matchE4($$dpth + 1, $$cr);
    }
    public matchE4($$dpth: number, $$cr?: ErrorTracker): Nullable<E4> {
        return this.memoise(
            () => {
                return this.choice<E4>([
                    () => this.matchE4_1($$dpth + 1, $$cr),
                    () => this.matchE4_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$E4$memo,
        );
    }
    public matchE4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E4_1> {
        return this.run<E4_1>($$dpth,
            () => {
                let $scope$a: Nullable<ATOM>;
                let $scope$op: Nullable<string>;
                let $scope$b: Nullable<E4>;
                let $$res: Nullable<E4_1> = null;
                if (true
                    && ($scope$a = this.matchATOM($$dpth + 1, $$cr)) !== null
                    && ($scope$op = this.regexAccept(String.raw`(?:i|j)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.matchE4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new E4_1($scope$a, $scope$op, $scope$b);
                }
                return $$res;
            });
    }
    public matchE4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E4_2> {
        return this.matchATOM($$dpth + 1, $$cr);
    }
    public matchATOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM> {
        return this.memoise(
            () => {
                return this.choice<ATOM>([
                    () => this.matchATOM_1($$dpth + 1, $$cr),
                    () => this.matchATOM_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ATOM$memo,
        );
    }
    public matchATOM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_1> {
        return this.run<ATOM_1>($$dpth,
            () => {
                let $scope$val: Nullable<INT>;
                let $$res: Nullable<ATOM_1> = null;
                if (true
                    && ($scope$val = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ATOM_1($scope$val);
                }
                return $$res;
            });
    }
    public matchATOM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_2> {
        return this.run<ATOM_2>($$dpth,
            () => {
                let $scope$val: Nullable<E0>;
                let $$res: Nullable<ATOM_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.matchE0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ATOM_2($scope$val);
                }
                return $$res;
            });
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.memoise(
            () => {
                return this.run<INT>($$dpth,
                    () => {
                        let $scope$val: Nullable<string>;
                        let $$res: Nullable<INT> = null;
                        if (true
                            && ($scope$val = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new INT($scope$val);
                        }
                        return $$res;
                    });
            },
            this.$scope$INT$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchE0(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchE0(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchE0(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<E0>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt): void {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}