/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* // Meta grammar for parser
* GRAM      := header=HDR? rules=RULEDEF+ $
* HDR       := '---' content='((?!---)(.|\r\n|\n))*' '---'
* RULEDEF   := _ namestart=@ name=NAME nameend=@ _ ':=' _ rule=RULE _
* RULE      := head=ALT tail={_ '\|' _ alt=ALT }*
*           .list = ALT[] { return [this.head, ...this.tail.map((x) => x.alt)]; }
* ALT       := rulename=RULENAME? matches=MATCHSPEC+ attrs=ATTR*
* MATCHSPEC := _ named={start=@ name=NAME _ '=' _}? rule=MATCH // TODO rename to match
* RULENAME  := '<' name=NAME '>' _
* MATCH     := SPECIAL | POSTOP
* SPECIAL   := op='@'
* POSTOP    := pre=PREOP op={ op='\+|\*|\?' | RANGESPEC }?
*             .optional = boolean { return this.op?.kind === ASTKinds.POSTOP_$0_1 && this.op.op === '?';}
* PREOP     := start=@ op='\&|!'? at=ATOM
* // Negative lookahead is used here to allow no requirement for semicolons
* // to denote end of rule definition
* ATOM      := start=@ name=NAME !'\s*:='
*            | match=STRLIT
*            | '{' _ sub=RULE _ '}'
*               .name = string | null { return null; }
*            | EOF
* EOF       := symb='\$'
* ATTR      := _ '\.' name=NAME _ '=' _ type=TS_TYPE _ code=CODE_SECTION
* NAME      := '[a-zA-Z_][a-zA-Z0-9_]*'
* STRLIT    := start=@ '\'' val='([^\'\\]|(\\.))*' '\'' mods='[mius]*'
* RANGESPEC := '\[\s*' a='[0-9]+' u={',\s*' b='[0-9]+'? }? '\s*\]'
*              .a_val = number { return parseInt(this.a); }
*              .b_val = number | null { return this.u !== null && this.u.b !== null ? parseInt(this.u.b) : null; }
*              .lb = number { return this.a_val; }
*              .ub = number { return this.b_val ?? (this.u !== null ? -1 : this.lb); }
* // Whitespace definition includes traditional whitespace
* // and // comments.
* _         := '(?:\s|(?:\/\/.*(?:\r\n|\n|$)))*'
* // Grammar to match TypeScript type defs
* TS_TYPE := _ start=@ { TS_FUNCTION | TS_CONSTRUCTOR | TS_EXPR } end=@
* TS_EXPR := _ TS_PRIM {_ '[&|]' TS_PRIM }*
* TS_PRIM := {
*     '\(' _ TS_TYPE _ '\)'
*     | TS_TYPE_QUERY
*     | TS_TYPE_REF
*     | TS_PROPERTY_NAME
*     | '\{' {_ TS_TYPE_MEMBER {_ '[;,]' _ TS_TYPE_MEMBER }* _ '[;,]?' }? _ '\}'
*     | '\[' _ { _ TS_TYPE {_ ',' _ TS_TYPE}* }? _ '\]'
*     } '\[\]'* // Optional trailing []s for array type
* TS_TYPE_REF := _ NAME {'\.' NAME}* {_ TS_GENERIC_ARGS}?
* TS_TYPE_QUERY := _ 'typeof' &_ _ NAME {'\.' NAME}*
* TS_FUNCTION := _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ '=>' _ TS_TYPE
* TS_CONSTRUCTOR := _ 'new' _ TS_FUNCTION
* TS_GENERIC_PARAMS := _ '<' _ {TS_GENERIC_PARAM {_ ',' _ TS_GENERIC_PARAM}* }? _ '>'
* TS_GENERIC_PARAM := _ NAME {_ 'extends' _ TS_TYPE}?
* TS_GENERIC_ARGS := _ '<' _ {TS_TYPE {_ ',' _ TS_TYPE}* }? _ '>'
* TS_PARAM_LIST := _ TS_REQUIRED_PARAMS {_ ',' _ TS_OPTIONAL_PARAMS}? {_ ',' _ TS_REST_PARAM}?
*     | _ TS_OPTIONAL_PARAMS {_ ',' _ TS_REST_PARAM}?
*     | _ TS_REST_PARAM
* TS_REQUIRED_PARAMS := _ TS_REQUIRED_PARAM {_ ',' _ TS_REQUIRED_PARAM}*
* TS_REQUIRED_PARAM := _ NAME _ ':' _ TS_TYPE
* TS_OPTIONAL_PARAMS := _ TS_OPTIONAL_PARAM _ {',' _ TS_OPTIONAL_PARAM}*
* TS_OPTIONAL_PARAM := _ NAME '\?' _ ':' _ TS_TYPE
* TS_REST_PARAM := _ '\.\.\.' _ NAME _ ':' _ TS_TYPE
* TS_TYPE_MEMBER := TS_PROPERTY_NAME '\??' _ ':' _ TS_TYPE
*     | _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE
*     | _ 'new' &_ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE
*     | _ '\[' _ NAME _ ':' _ NAME _ '\]' _ ':' _ TS_TYPE
*     | _ NAME '\??' _ TS_GENERIC_PARAMS? _ '\(' _ TS_PARAM_LIST? _ '\)' _ ':' _ TS_TYPE
* TS_PROPERTY_NAME := NAME | TS_STRING | TS_NUM
* TS_STRING := '"' val='([^"\\]|(\\.))*' '"'
*     | '\'' val='([^\'\\]|(\\.))*' '\''
*     | '`' val='([^`\\]|(\\.))*' '`'
* TS_NUM := '-?[0-9]+(?:\.[0-9]+)?'
* // Grammar to match code section without escaped braces
* // Logic is based off braces can only appear without matching brace in strings.
* CODE_SECTION := _ '\{' start=@ CODE_REC? end=@ _ '\}'
* CODE_REC := { '[^{}\'"`]+' | TS_STRING | '\{' CODE_REC _ '\}' }*
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    GRAM = "GRAM",
    HDR = "HDR",
    RULEDEF = "RULEDEF",
    RULE = "RULE",
    RULE_$0 = "RULE_$0",
    ALT = "ALT",
    MATCHSPEC = "MATCHSPEC",
    MATCHSPEC_$0 = "MATCHSPEC_$0",
    RULENAME = "RULENAME",
    MATCH_1 = "MATCH_1",
    MATCH_2 = "MATCH_2",
    SPECIAL = "SPECIAL",
    POSTOP = "POSTOP",
    POSTOP_$0_1 = "POSTOP_$0_1",
    POSTOP_$0_2 = "POSTOP_$0_2",
    PREOP = "PREOP",
    ATOM_1 = "ATOM_1",
    ATOM_2 = "ATOM_2",
    ATOM_3 = "ATOM_3",
    ATOM_4 = "ATOM_4",
    EOF = "EOF",
    ATTR = "ATTR",
    NAME = "NAME",
    STRLIT = "STRLIT",
    RANGESPEC = "RANGESPEC",
    RANGESPEC_$0 = "RANGESPEC_$0",
    _ = "_",
    TS_TYPE = "TS_TYPE",
    TS_TYPE_$0_1 = "TS_TYPE_$0_1",
    TS_TYPE_$0_2 = "TS_TYPE_$0_2",
    TS_TYPE_$0_3 = "TS_TYPE_$0_3",
    TS_EXPR = "TS_EXPR",
    TS_EXPR_$0 = "TS_EXPR_$0",
    TS_PRIM = "TS_PRIM",
    TS_PRIM_$0_1 = "TS_PRIM_$0_1",
    TS_PRIM_$0_2 = "TS_PRIM_$0_2",
    TS_PRIM_$0_3 = "TS_PRIM_$0_3",
    TS_PRIM_$0_4 = "TS_PRIM_$0_4",
    TS_PRIM_$0_5 = "TS_PRIM_$0_5",
    TS_PRIM_$0_6 = "TS_PRIM_$0_6",
    TS_PRIM_$0_$0 = "TS_PRIM_$0_$0",
    TS_PRIM_$0_$0_$0 = "TS_PRIM_$0_$0_$0",
    TS_PRIM_$0_$1 = "TS_PRIM_$0_$1",
    TS_PRIM_$0_$1_$0 = "TS_PRIM_$0_$1_$0",
    TS_TYPE_REF = "TS_TYPE_REF",
    TS_TYPE_REF_$0 = "TS_TYPE_REF_$0",
    TS_TYPE_REF_$1 = "TS_TYPE_REF_$1",
    TS_TYPE_QUERY = "TS_TYPE_QUERY",
    TS_TYPE_QUERY_$0 = "TS_TYPE_QUERY_$0",
    TS_FUNCTION = "TS_FUNCTION",
    TS_CONSTRUCTOR = "TS_CONSTRUCTOR",
    TS_GENERIC_PARAMS = "TS_GENERIC_PARAMS",
    TS_GENERIC_PARAMS_$0 = "TS_GENERIC_PARAMS_$0",
    TS_GENERIC_PARAMS_$0_$0 = "TS_GENERIC_PARAMS_$0_$0",
    TS_GENERIC_PARAM = "TS_GENERIC_PARAM",
    TS_GENERIC_PARAM_$0 = "TS_GENERIC_PARAM_$0",
    TS_GENERIC_ARGS = "TS_GENERIC_ARGS",
    TS_GENERIC_ARGS_$0 = "TS_GENERIC_ARGS_$0",
    TS_GENERIC_ARGS_$0_$0 = "TS_GENERIC_ARGS_$0_$0",
    TS_PARAM_LIST_1 = "TS_PARAM_LIST_1",
    TS_PARAM_LIST_2 = "TS_PARAM_LIST_2",
    TS_PARAM_LIST_3 = "TS_PARAM_LIST_3",
    TS_PARAM_LIST_$0 = "TS_PARAM_LIST_$0",
    TS_PARAM_LIST_$1 = "TS_PARAM_LIST_$1",
    TS_PARAM_LIST_$2 = "TS_PARAM_LIST_$2",
    TS_REQUIRED_PARAMS = "TS_REQUIRED_PARAMS",
    TS_REQUIRED_PARAMS_$0 = "TS_REQUIRED_PARAMS_$0",
    TS_REQUIRED_PARAM = "TS_REQUIRED_PARAM",
    TS_OPTIONAL_PARAMS = "TS_OPTIONAL_PARAMS",
    TS_OPTIONAL_PARAMS_$0 = "TS_OPTIONAL_PARAMS_$0",
    TS_OPTIONAL_PARAM = "TS_OPTIONAL_PARAM",
    TS_REST_PARAM = "TS_REST_PARAM",
    TS_TYPE_MEMBER_1 = "TS_TYPE_MEMBER_1",
    TS_TYPE_MEMBER_2 = "TS_TYPE_MEMBER_2",
    TS_TYPE_MEMBER_3 = "TS_TYPE_MEMBER_3",
    TS_TYPE_MEMBER_4 = "TS_TYPE_MEMBER_4",
    TS_TYPE_MEMBER_5 = "TS_TYPE_MEMBER_5",
    TS_PROPERTY_NAME_1 = "TS_PROPERTY_NAME_1",
    TS_PROPERTY_NAME_2 = "TS_PROPERTY_NAME_2",
    TS_PROPERTY_NAME_3 = "TS_PROPERTY_NAME_3",
    TS_STRING_1 = "TS_STRING_1",
    TS_STRING_2 = "TS_STRING_2",
    TS_STRING_3 = "TS_STRING_3",
    TS_NUM = "TS_NUM",
    CODE_SECTION = "CODE_SECTION",
    CODE_REC = "CODE_REC",
    CODE_REC_$0_1 = "CODE_REC_$0_1",
    CODE_REC_$0_2 = "CODE_REC_$0_2",
    CODE_REC_$0_3 = "CODE_REC_$0_3",
    $EOF = "$EOF",
}
export interface GRAM {
    kind: ASTKinds.GRAM;
    header: Nullable<HDR>;
    rules: [RULEDEF, ...RULEDEF[]];
}
export interface HDR {
    kind: ASTKinds.HDR;
    content: string;
}
export interface RULEDEF {
    kind: ASTKinds.RULEDEF;
    namestart: PosInfo;
    name: NAME;
    nameend: PosInfo;
    rule: RULE;
}
export class RULE {
    public kind: ASTKinds.RULE = ASTKinds.RULE;
    public head: ALT;
    public tail: RULE_$0[];
    public list: ALT[];
    constructor(head: ALT, tail: RULE_$0[]){
        this.head = head;
        this.tail = tail;
        this.list = ((): ALT[] => {
        return [this.head, ...this.tail.map((x) => x.alt)];
        })();
    }
}
export interface RULE_$0 {
    kind: ASTKinds.RULE_$0;
    alt: ALT;
}
export interface ALT {
    kind: ASTKinds.ALT;
    rulename: Nullable<RULENAME>;
    matches: [MATCHSPEC, ...MATCHSPEC[]];
    attrs: ATTR[];
}
export interface MATCHSPEC {
    kind: ASTKinds.MATCHSPEC;
    named: Nullable<MATCHSPEC_$0>;
    rule: MATCH;
}
export interface MATCHSPEC_$0 {
    kind: ASTKinds.MATCHSPEC_$0;
    start: PosInfo;
    name: NAME;
}
export interface RULENAME {
    kind: ASTKinds.RULENAME;
    name: NAME;
}
export type MATCH = MATCH_1 | MATCH_2;
export type MATCH_1 = SPECIAL;
export type MATCH_2 = POSTOP;
export interface SPECIAL {
    kind: ASTKinds.SPECIAL;
    op: string;
}
export class POSTOP {
    public kind: ASTKinds.POSTOP = ASTKinds.POSTOP;
    public pre: PREOP;
    public op: Nullable<POSTOP_$0>;
    public optional: boolean;
    constructor(pre: PREOP, op: Nullable<POSTOP_$0>){
        this.pre = pre;
        this.op = op;
        this.optional = ((): boolean => {
        return this.op?.kind === ASTKinds.POSTOP_$0_1 && this.op.op === '?';
        })();
    }
}
export type POSTOP_$0 = POSTOP_$0_1 | POSTOP_$0_2;
export interface POSTOP_$0_1 {
    kind: ASTKinds.POSTOP_$0_1;
    op: string;
}
export type POSTOP_$0_2 = RANGESPEC;
export interface PREOP {
    kind: ASTKinds.PREOP;
    start: PosInfo;
    op: Nullable<string>;
    at: ATOM;
}
export type ATOM = ATOM_1 | ATOM_2 | ATOM_3 | ATOM_4;
export interface ATOM_1 {
    kind: ASTKinds.ATOM_1;
    start: PosInfo;
    name: NAME;
}
export interface ATOM_2 {
    kind: ASTKinds.ATOM_2;
    match: STRLIT;
}
export class ATOM_3 {
    public kind: ASTKinds.ATOM_3 = ASTKinds.ATOM_3;
    public sub: RULE;
    public name: string | null;
    constructor(sub: RULE){
        this.sub = sub;
        this.name = ((): string | null => {
        return null;
        })();
    }
}
export type ATOM_4 = EOF;
export interface EOF {
    kind: ASTKinds.EOF;
    symb: string;
}
export interface ATTR {
    kind: ASTKinds.ATTR;
    name: NAME;
    type: TS_TYPE;
    code: CODE_SECTION;
}
export type NAME = string;
export interface STRLIT {
    kind: ASTKinds.STRLIT;
    start: PosInfo;
    val: string;
    mods: string;
}
export class RANGESPEC {
    public kind: ASTKinds.RANGESPEC = ASTKinds.RANGESPEC;
    public a: string;
    public u: Nullable<RANGESPEC_$0>;
    public a_val: number;
    public b_val: number | null;
    public lb: number;
    public ub: number;
    constructor(a: string, u: Nullable<RANGESPEC_$0>){
        this.a = a;
        this.u = u;
        this.a_val = ((): number => {
        return parseInt(this.a);
        })();
        this.b_val = ((): number | null => {
        return this.u !== null && this.u.b !== null ? parseInt(this.u.b) : null;
        })();
        this.lb = ((): number => {
        return this.a_val;
        })();
        this.ub = ((): number => {
        return this.b_val ?? (this.u !== null ? -1 : this.lb);
        })();
    }
}
export interface RANGESPEC_$0 {
    kind: ASTKinds.RANGESPEC_$0;
    b: Nullable<string>;
}
export type _ = string;
export interface TS_TYPE {
    kind: ASTKinds.TS_TYPE;
    start: PosInfo;
    end: PosInfo;
}
export type TS_TYPE_$0 = TS_TYPE_$0_1 | TS_TYPE_$0_2 | TS_TYPE_$0_3;
export type TS_TYPE_$0_1 = TS_FUNCTION;
export type TS_TYPE_$0_2 = TS_CONSTRUCTOR;
export type TS_TYPE_$0_3 = TS_EXPR;
export interface TS_EXPR {
    kind: ASTKinds.TS_EXPR;
}
export interface TS_EXPR_$0 {
    kind: ASTKinds.TS_EXPR_$0;
}
export interface TS_PRIM {
    kind: ASTKinds.TS_PRIM;
}
export type TS_PRIM_$0 = TS_PRIM_$0_1 | TS_PRIM_$0_2 | TS_PRIM_$0_3 | TS_PRIM_$0_4 | TS_PRIM_$0_5 | TS_PRIM_$0_6;
export interface TS_PRIM_$0_1 {
    kind: ASTKinds.TS_PRIM_$0_1;
}
export type TS_PRIM_$0_2 = TS_TYPE_QUERY;
export type TS_PRIM_$0_3 = TS_TYPE_REF;
export type TS_PRIM_$0_4 = TS_PROPERTY_NAME;
export interface TS_PRIM_$0_5 {
    kind: ASTKinds.TS_PRIM_$0_5;
}
export interface TS_PRIM_$0_6 {
    kind: ASTKinds.TS_PRIM_$0_6;
}
export interface TS_PRIM_$0_$0 {
    kind: ASTKinds.TS_PRIM_$0_$0;
}
export interface TS_PRIM_$0_$0_$0 {
    kind: ASTKinds.TS_PRIM_$0_$0_$0;
}
export interface TS_PRIM_$0_$1 {
    kind: ASTKinds.TS_PRIM_$0_$1;
}
export interface TS_PRIM_$0_$1_$0 {
    kind: ASTKinds.TS_PRIM_$0_$1_$0;
}
export interface TS_TYPE_REF {
    kind: ASTKinds.TS_TYPE_REF;
}
export interface TS_TYPE_REF_$0 {
    kind: ASTKinds.TS_TYPE_REF_$0;
}
export interface TS_TYPE_REF_$1 {
    kind: ASTKinds.TS_TYPE_REF_$1;
}
export interface TS_TYPE_QUERY {
    kind: ASTKinds.TS_TYPE_QUERY;
}
export interface TS_TYPE_QUERY_$0 {
    kind: ASTKinds.TS_TYPE_QUERY_$0;
}
export interface TS_FUNCTION {
    kind: ASTKinds.TS_FUNCTION;
}
export interface TS_CONSTRUCTOR {
    kind: ASTKinds.TS_CONSTRUCTOR;
}
export interface TS_GENERIC_PARAMS {
    kind: ASTKinds.TS_GENERIC_PARAMS;
}
export interface TS_GENERIC_PARAMS_$0 {
    kind: ASTKinds.TS_GENERIC_PARAMS_$0;
}
export interface TS_GENERIC_PARAMS_$0_$0 {
    kind: ASTKinds.TS_GENERIC_PARAMS_$0_$0;
}
export interface TS_GENERIC_PARAM {
    kind: ASTKinds.TS_GENERIC_PARAM;
}
export interface TS_GENERIC_PARAM_$0 {
    kind: ASTKinds.TS_GENERIC_PARAM_$0;
}
export interface TS_GENERIC_ARGS {
    kind: ASTKinds.TS_GENERIC_ARGS;
}
export interface TS_GENERIC_ARGS_$0 {
    kind: ASTKinds.TS_GENERIC_ARGS_$0;
}
export interface TS_GENERIC_ARGS_$0_$0 {
    kind: ASTKinds.TS_GENERIC_ARGS_$0_$0;
}
export type TS_PARAM_LIST = TS_PARAM_LIST_1 | TS_PARAM_LIST_2 | TS_PARAM_LIST_3;
export interface TS_PARAM_LIST_1 {
    kind: ASTKinds.TS_PARAM_LIST_1;
}
export interface TS_PARAM_LIST_2 {
    kind: ASTKinds.TS_PARAM_LIST_2;
}
export interface TS_PARAM_LIST_3 {
    kind: ASTKinds.TS_PARAM_LIST_3;
}
export interface TS_PARAM_LIST_$0 {
    kind: ASTKinds.TS_PARAM_LIST_$0;
}
export interface TS_PARAM_LIST_$1 {
    kind: ASTKinds.TS_PARAM_LIST_$1;
}
export interface TS_PARAM_LIST_$2 {
    kind: ASTKinds.TS_PARAM_LIST_$2;
}
export interface TS_REQUIRED_PARAMS {
    kind: ASTKinds.TS_REQUIRED_PARAMS;
}
export interface TS_REQUIRED_PARAMS_$0 {
    kind: ASTKinds.TS_REQUIRED_PARAMS_$0;
}
export interface TS_REQUIRED_PARAM {
    kind: ASTKinds.TS_REQUIRED_PARAM;
}
export interface TS_OPTIONAL_PARAMS {
    kind: ASTKinds.TS_OPTIONAL_PARAMS;
}
export interface TS_OPTIONAL_PARAMS_$0 {
    kind: ASTKinds.TS_OPTIONAL_PARAMS_$0;
}
export interface TS_OPTIONAL_PARAM {
    kind: ASTKinds.TS_OPTIONAL_PARAM;
}
export interface TS_REST_PARAM {
    kind: ASTKinds.TS_REST_PARAM;
}
export type TS_TYPE_MEMBER = TS_TYPE_MEMBER_1 | TS_TYPE_MEMBER_2 | TS_TYPE_MEMBER_3 | TS_TYPE_MEMBER_4 | TS_TYPE_MEMBER_5;
export interface TS_TYPE_MEMBER_1 {
    kind: ASTKinds.TS_TYPE_MEMBER_1;
}
export interface TS_TYPE_MEMBER_2 {
    kind: ASTKinds.TS_TYPE_MEMBER_2;
}
export interface TS_TYPE_MEMBER_3 {
    kind: ASTKinds.TS_TYPE_MEMBER_3;
}
export interface TS_TYPE_MEMBER_4 {
    kind: ASTKinds.TS_TYPE_MEMBER_4;
}
export interface TS_TYPE_MEMBER_5 {
    kind: ASTKinds.TS_TYPE_MEMBER_5;
}
export type TS_PROPERTY_NAME = TS_PROPERTY_NAME_1 | TS_PROPERTY_NAME_2 | TS_PROPERTY_NAME_3;
export type TS_PROPERTY_NAME_1 = NAME;
export type TS_PROPERTY_NAME_2 = TS_STRING;
export type TS_PROPERTY_NAME_3 = TS_NUM;
export type TS_STRING = TS_STRING_1 | TS_STRING_2 | TS_STRING_3;
export interface TS_STRING_1 {
    kind: ASTKinds.TS_STRING_1;
    val: string;
}
export interface TS_STRING_2 {
    kind: ASTKinds.TS_STRING_2;
    val: string;
}
export interface TS_STRING_3 {
    kind: ASTKinds.TS_STRING_3;
    val: string;
}
export type TS_NUM = string;
export interface CODE_SECTION {
    kind: ASTKinds.CODE_SECTION;
    start: PosInfo;
    end: PosInfo;
}
export type CODE_REC = CODE_REC_$0[];
export type CODE_REC_$0 = CODE_REC_$0_1 | CODE_REC_$0_2 | CODE_REC_$0_3;
export type CODE_REC_$0_1 = string;
export type CODE_REC_$0_2 = TS_STRING;
export interface CODE_REC_$0_3 {
    kind: ASTKinds.CODE_REC_$0_3;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchGRAM($$dpth: number, $$cr?: ErrorTracker): Nullable<GRAM> {
        return this.run<GRAM>($$dpth,
            () => {
                let $scope$header: Nullable<Nullable<HDR>>;
                let $scope$rules: Nullable<[RULEDEF, ...RULEDEF[]]>;
                let $$res: Nullable<GRAM> = null;
                if (true
                    && (($scope$header = this.matchHDR($$dpth + 1, $$cr)) || true)
                    && ($scope$rules = this.loopPlus<RULEDEF>(() => this.matchRULEDEF($$dpth + 1, $$cr))) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.GRAM, header: $scope$header, rules: $scope$rules};
                }
                return $$res;
            });
    }
    public matchHDR($$dpth: number, $$cr?: ErrorTracker): Nullable<HDR> {
        return this.run<HDR>($$dpth,
            () => {
                let $scope$content: Nullable<string>;
                let $$res: Nullable<HDR> = null;
                if (true
                    && this.regexAccept(String.raw`(?:---)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$content = this.regexAccept(String.raw`(?:((?!---)(.|\r\n|\n))*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:---)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.HDR, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchRULEDEF($$dpth: number, $$cr?: ErrorTracker): Nullable<RULEDEF> {
        return this.run<RULEDEF>($$dpth,
            () => {
                let $scope$namestart: Nullable<PosInfo>;
                let $scope$name: Nullable<NAME>;
                let $scope$nameend: Nullable<PosInfo>;
                let $scope$rule: Nullable<RULE>;
                let $$res: Nullable<RULEDEF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$namestart = this.mark()) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && ($scope$nameend = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rule = this.matchRULE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.RULEDEF, namestart: $scope$namestart, name: $scope$name, nameend: $scope$nameend, rule: $scope$rule};
                }
                return $$res;
            });
    }
    public matchRULE($$dpth: number, $$cr?: ErrorTracker): Nullable<RULE> {
        return this.run<RULE>($$dpth,
            () => {
                let $scope$head: Nullable<ALT>;
                let $scope$tail: Nullable<RULE_$0[]>;
                let $$res: Nullable<RULE> = null;
                if (true
                    && ($scope$head = this.matchALT($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<RULE_$0>(() => this.matchRULE_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = new RULE($scope$head, $scope$tail);
                }
                return $$res;
            });
    }
    public matchRULE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<RULE_$0> {
        return this.run<RULE_$0>($$dpth,
            () => {
                let $scope$alt: Nullable<ALT>;
                let $$res: Nullable<RULE_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\|)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$alt = this.matchALT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.RULE_$0, alt: $scope$alt};
                }
                return $$res;
            });
    }
    public matchALT($$dpth: number, $$cr?: ErrorTracker): Nullable<ALT> {
        return this.run<ALT>($$dpth,
            () => {
                let $scope$rulename: Nullable<Nullable<RULENAME>>;
                let $scope$matches: Nullable<[MATCHSPEC, ...MATCHSPEC[]]>;
                let $scope$attrs: Nullable<ATTR[]>;
                let $$res: Nullable<ALT> = null;
                if (true
                    && (($scope$rulename = this.matchRULENAME($$dpth + 1, $$cr)) || true)
                    && ($scope$matches = this.loopPlus<MATCHSPEC>(() => this.matchMATCHSPEC($$dpth + 1, $$cr))) !== null
                    && ($scope$attrs = this.loop<ATTR>(() => this.matchATTR($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = {kind: ASTKinds.ALT, rulename: $scope$rulename, matches: $scope$matches, attrs: $scope$attrs};
                }
                return $$res;
            });
    }
    public matchMATCHSPEC($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCHSPEC> {
        return this.run<MATCHSPEC>($$dpth,
            () => {
                let $scope$named: Nullable<Nullable<MATCHSPEC_$0>>;
                let $scope$rule: Nullable<MATCH>;
                let $$res: Nullable<MATCHSPEC> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$named = this.matchMATCHSPEC_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$rule = this.matchMATCH($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MATCHSPEC, named: $scope$named, rule: $scope$rule};
                }
                return $$res;
            });
    }
    public matchMATCHSPEC_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCHSPEC_$0> {
        return this.run<MATCHSPEC_$0>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$name: Nullable<NAME>;
                let $$res: Nullable<MATCHSPEC_$0> = null;
                if (true
                    && ($scope$start = this.mark()) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.MATCHSPEC_$0, start: $scope$start, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchRULENAME($$dpth: number, $$cr?: ErrorTracker): Nullable<RULENAME> {
        return this.run<RULENAME>($$dpth,
            () => {
                let $scope$name: Nullable<NAME>;
                let $$res: Nullable<RULENAME> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.RULENAME, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchMATCH($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCH> {
        return this.choice<MATCH>([
            () => this.matchMATCH_1($$dpth + 1, $$cr),
            () => this.matchMATCH_2($$dpth + 1, $$cr),
        ]);
    }
    public matchMATCH_1($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCH_1> {
        return this.matchSPECIAL($$dpth + 1, $$cr);
    }
    public matchMATCH_2($$dpth: number, $$cr?: ErrorTracker): Nullable<MATCH_2> {
        return this.matchPOSTOP($$dpth + 1, $$cr);
    }
    public matchSPECIAL($$dpth: number, $$cr?: ErrorTracker): Nullable<SPECIAL> {
        return this.run<SPECIAL>($$dpth,
            () => {
                let $scope$op: Nullable<string>;
                let $$res: Nullable<SPECIAL> = null;
                if (true
                    && ($scope$op = this.regexAccept(String.raw`(?:@)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SPECIAL, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchPOSTOP($$dpth: number, $$cr?: ErrorTracker): Nullable<POSTOP> {
        return this.run<POSTOP>($$dpth,
            () => {
                let $scope$pre: Nullable<PREOP>;
                let $scope$op: Nullable<Nullable<POSTOP_$0>>;
                let $$res: Nullable<POSTOP> = null;
                if (true
                    && ($scope$pre = this.matchPREOP($$dpth + 1, $$cr)) !== null
                    && (($scope$op = this.matchPOSTOP_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new POSTOP($scope$pre, $scope$op);
                }
                return $$res;
            });
    }
    public matchPOSTOP_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<POSTOP_$0> {
        return this.choice<POSTOP_$0>([
            () => this.matchPOSTOP_$0_1($$dpth + 1, $$cr),
            () => this.matchPOSTOP_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchPOSTOP_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<POSTOP_$0_1> {
        return this.run<POSTOP_$0_1>($$dpth,
            () => {
                let $scope$op: Nullable<string>;
                let $$res: Nullable<POSTOP_$0_1> = null;
                if (true
                    && ($scope$op = this.regexAccept(String.raw`(?:\+|\*|\?)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.POSTOP_$0_1, op: $scope$op};
                }
                return $$res;
            });
    }
    public matchPOSTOP_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<POSTOP_$0_2> {
        return this.matchRANGESPEC($$dpth + 1, $$cr);
    }
    public matchPREOP($$dpth: number, $$cr?: ErrorTracker): Nullable<PREOP> {
        return this.run<PREOP>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$op: Nullable<Nullable<string>>;
                let $scope$at: Nullable<ATOM>;
                let $$res: Nullable<PREOP> = null;
                if (true
                    && ($scope$start = this.mark()) !== null
                    && (($scope$op = this.regexAccept(String.raw`(?:\&|!)`, "", $$dpth + 1, $$cr)) || true)
                    && ($scope$at = this.matchATOM($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.PREOP, start: $scope$start, op: $scope$op, at: $scope$at};
                }
                return $$res;
            });
    }
    public matchATOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM> {
        return this.choice<ATOM>([
            () => this.matchATOM_1($$dpth + 1, $$cr),
            () => this.matchATOM_2($$dpth + 1, $$cr),
            () => this.matchATOM_3($$dpth + 1, $$cr),
            () => this.matchATOM_4($$dpth + 1, $$cr),
        ]);
    }
    public matchATOM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_1> {
        return this.run<ATOM_1>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$name: Nullable<NAME>;
                let $$res: Nullable<ATOM_1> = null;
                if (true
                    && ($scope$start = this.mark()) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:\s*:=)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ATOM_1, start: $scope$start, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchATOM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_2> {
        return this.run<ATOM_2>($$dpth,
            () => {
                let $scope$match: Nullable<STRLIT>;
                let $$res: Nullable<ATOM_2> = null;
                if (true
                    && ($scope$match = this.matchSTRLIT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ATOM_2, match: $scope$match};
                }
                return $$res;
            });
    }
    public matchATOM_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_3> {
        return this.run<ATOM_3>($$dpth,
            () => {
                let $scope$sub: Nullable<RULE>;
                let $$res: Nullable<ATOM_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$sub = this.matchRULE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ATOM_3($scope$sub);
                }
                return $$res;
            });
    }
    public matchATOM_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ATOM_4> {
        return this.matchEOF($$dpth + 1, $$cr);
    }
    public matchEOF($$dpth: number, $$cr?: ErrorTracker): Nullable<EOF> {
        return this.run<EOF>($$dpth,
            () => {
                let $scope$symb: Nullable<string>;
                let $$res: Nullable<EOF> = null;
                if (true
                    && ($scope$symb = this.regexAccept(String.raw`(?:\$)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.EOF, symb: $scope$symb};
                }
                return $$res;
            });
    }
    public matchATTR($$dpth: number, $$cr?: ErrorTracker): Nullable<ATTR> {
        return this.run<ATTR>($$dpth,
            () => {
                let $scope$name: Nullable<NAME>;
                let $scope$type: Nullable<TS_TYPE>;
                let $scope$code: Nullable<CODE_SECTION>;
                let $$res: Nullable<ATTR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchTS_TYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$code = this.matchCODE_SECTION($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ATTR, name: $scope$name, type: $scope$type, code: $scope$code};
                }
                return $$res;
            });
    }
    public matchNAME($$dpth: number, $$cr?: ErrorTracker): Nullable<NAME> {
        return this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr);
    }
    public matchSTRLIT($$dpth: number, $$cr?: ErrorTracker): Nullable<STRLIT> {
        return this.run<STRLIT>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$val: Nullable<string>;
                let $scope$mods: Nullable<string>;
                let $$res: Nullable<STRLIT> = null;
                if (true
                    && ($scope$start = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\')`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.regexAccept(String.raw`(?:([^\'\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\')`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$mods = this.regexAccept(String.raw`(?:[mius]*)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.STRLIT, start: $scope$start, val: $scope$val, mods: $scope$mods};
                }
                return $$res;
            });
    }
    public matchRANGESPEC($$dpth: number, $$cr?: ErrorTracker): Nullable<RANGESPEC> {
        return this.run<RANGESPEC>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $scope$u: Nullable<Nullable<RANGESPEC_$0>>;
                let $$res: Nullable<RANGESPEC> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[\s*)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$a = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                    && (($scope$u = this.matchRANGESPEC_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\s*\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new RANGESPEC($scope$a, $scope$u);
                }
                return $$res;
            });
    }
    public matchRANGESPEC_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<RANGESPEC_$0> {
        return this.run<RANGESPEC_$0>($$dpth,
            () => {
                let $scope$b: Nullable<Nullable<string>>;
                let $$res: Nullable<RANGESPEC_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,\s*)`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$b = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.RANGESPEC_$0, b: $scope$b};
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:(?:\s|(?:\/\/.*(?:\r\n|\n|$)))*)`, "", $$dpth + 1, $$cr);
    }
    public matchTS_TYPE($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE> {
        return this.run<TS_TYPE>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$end: Nullable<PosInfo>;
                let $$res: Nullable<TS_TYPE> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$start = this.mark()) !== null
                    && this.matchTS_TYPE_$0($$dpth + 1, $$cr) !== null
                    && ($scope$end = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE, start: $scope$start, end: $scope$end};
                }
                return $$res;
            });
    }
    public matchTS_TYPE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_$0> {
        return this.choice<TS_TYPE_$0>([
            () => this.matchTS_TYPE_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_TYPE_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_$0_1> {
        return this.matchTS_FUNCTION($$dpth + 1, $$cr);
    }
    public matchTS_TYPE_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_$0_2> {
        return this.matchTS_CONSTRUCTOR($$dpth + 1, $$cr);
    }
    public matchTS_TYPE_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_$0_3> {
        return this.matchTS_EXPR($$dpth + 1, $$cr);
    }
    public matchTS_EXPR($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_EXPR> {
        return this.run<TS_EXPR>($$dpth,
            () => {
                let $$res: Nullable<TS_EXPR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_PRIM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_EXPR_$0>(() => this.matchTS_EXPR_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_EXPR, };
                }
                return $$res;
            });
    }
    public matchTS_EXPR_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_EXPR_$0> {
        return this.run<TS_EXPR_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_EXPR_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[&|])`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTS_PRIM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_EXPR_$0, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM> {
        return this.run<TS_PRIM>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM> = null;
                if (true
                    && this.matchTS_PRIM_$0($$dpth + 1, $$cr) !== null
                    && this.loop<string>(() => this.regexAccept(String.raw`(?:\[\])`, "", $$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0> {
        return this.choice<TS_PRIM_$0>([
            () => this.matchTS_PRIM_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_3($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_4($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_5($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_6($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_PRIM_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_1> {
        return this.run<TS_PRIM_$0_1>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_1, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_2> {
        return this.matchTS_TYPE_QUERY($$dpth + 1, $$cr);
    }
    public matchTS_PRIM_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_3> {
        return this.matchTS_TYPE_REF($$dpth + 1, $$cr);
    }
    public matchTS_PRIM_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_4> {
        return this.matchTS_PROPERTY_NAME($$dpth + 1, $$cr);
    }
    public matchTS_PRIM_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_5> {
        return this.run<TS_PRIM_$0_5>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\{)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PRIM_$0_$0($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_5, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_6> {
        return this.run<TS_PRIM_$0_6>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PRIM_$0_$1($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_6, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_$0> {
        return this.run<TS_PRIM_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE_MEMBER($$dpth + 1, $$cr) !== null
                    && this.loop<TS_PRIM_$0_$0_$0>(() => this.matchTS_PRIM_$0_$0_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[;,]?)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$0, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_$0_$0> {
        return this.run<TS_PRIM_$0_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_$0_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[;,])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE_MEMBER($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$0_$0, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_$1> {
        return this.run<TS_PRIM_$0_$1>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_$1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                    && this.loop<TS_PRIM_$0_$1_$0>(() => this.matchTS_PRIM_$0_$1_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$1, };
                }
                return $$res;
            });
    }
    public matchTS_PRIM_$0_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PRIM_$0_$1_$0> {
        return this.run<TS_PRIM_$0_$1_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_PRIM_$0_$1_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$1_$0, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_REF($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_REF> {
        return this.run<TS_TYPE_REF>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_REF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.loop<TS_TYPE_REF_$0>(() => this.matchTS_TYPE_REF_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && ((this.matchTS_TYPE_REF_$1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_REF, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_REF_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_REF_$0> {
        return this.run<TS_TYPE_REF_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_REF_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_REF_$0, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_REF_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_REF_$1> {
        return this.run<TS_TYPE_REF_$1>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_REF_$1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_GENERIC_ARGS($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_REF_$1, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_QUERY($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_QUERY> {
        return this.run<TS_TYPE_QUERY>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_QUERY> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:typeof)`, "", $$dpth + 1, $$cr) !== null
                    && this.noConsume<_>(() => this.match_($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.loop<TS_TYPE_QUERY_$0>(() => this.matchTS_TYPE_QUERY_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_QUERY, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_QUERY_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_QUERY_$0> {
        return this.run<TS_TYPE_QUERY_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_QUERY_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_QUERY_$0, };
                }
                return $$res;
            });
    }
    public matchTS_FUNCTION($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_FUNCTION> {
        return this.run<TS_FUNCTION>($$dpth,
            () => {
                let $$res: Nullable<TS_FUNCTION> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_FUNCTION, };
                }
                return $$res;
            });
    }
    public matchTS_CONSTRUCTOR($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_CONSTRUCTOR> {
        return this.run<TS_CONSTRUCTOR>($$dpth,
            () => {
                let $$res: Nullable<TS_CONSTRUCTOR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:new)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_FUNCTION($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_CONSTRUCTOR, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_PARAMS($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_PARAMS> {
        return this.run<TS_GENERIC_PARAMS>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_PARAMS> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAMS_$0($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_PARAMS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_PARAMS_$0> {
        return this.run<TS_GENERIC_PARAMS_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_PARAMS_$0> = null;
                if (true
                    && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_GENERIC_PARAMS_$0_$0>(() => this.matchTS_GENERIC_PARAMS_$0_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS_$0, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_PARAMS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_PARAMS_$0_$0> {
        return this.run<TS_GENERIC_PARAMS_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_PARAMS_$0_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS_$0_$0, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_PARAM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_PARAM> {
        return this.run<TS_GENERIC_PARAM>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_PARAM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAM_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAM, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_PARAM_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_PARAM_$0> {
        return this.run<TS_GENERIC_PARAM_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_PARAM_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:extends)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAM_$0, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_ARGS($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_ARGS> {
        return this.run<TS_GENERIC_ARGS>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_ARGS> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_ARGS_$0($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_ARGS, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_ARGS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_ARGS_$0> {
        return this.run<TS_GENERIC_ARGS_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_ARGS_$0> = null;
                if (true
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                    && this.loop<TS_GENERIC_ARGS_$0_$0>(() => this.matchTS_GENERIC_ARGS_$0_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_ARGS_$0, };
                }
                return $$res;
            });
    }
    public matchTS_GENERIC_ARGS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_GENERIC_ARGS_$0_$0> {
        return this.run<TS_GENERIC_ARGS_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_GENERIC_ARGS_$0_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_ARGS_$0_$0, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST> {
        return this.choice<TS_PARAM_LIST>([
            () => this.matchTS_PARAM_LIST_1($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_2($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_PARAM_LIST_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_1> {
        return this.run<TS_PARAM_LIST_1>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REQUIRED_PARAMS($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST_$0($$dpth + 1, $$cr)) || true)
                    && ((this.matchTS_PARAM_LIST_$1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_1, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_2> {
        return this.run<TS_PARAM_LIST_2>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST_$2($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_2, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_3> {
        return this.run<TS_PARAM_LIST_3>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_3> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_3, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_$0> {
        return this.run<TS_PARAM_LIST_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$0, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_$1> {
        return this.run<TS_PARAM_LIST_$1>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_$1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$1, };
                }
                return $$res;
            });
    }
    public matchTS_PARAM_LIST_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PARAM_LIST_$2> {
        return this.run<TS_PARAM_LIST_$2>($$dpth,
            () => {
                let $$res: Nullable<TS_PARAM_LIST_$2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$2, };
                }
                return $$res;
            });
    }
    public matchTS_REQUIRED_PARAMS($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_REQUIRED_PARAMS> {
        return this.run<TS_REQUIRED_PARAMS>($$dpth,
            () => {
                let $$res: Nullable<TS_REQUIRED_PARAMS> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_REQUIRED_PARAMS_$0>(() => this.matchTS_REQUIRED_PARAMS_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAMS, };
                }
                return $$res;
            });
    }
    public matchTS_REQUIRED_PARAMS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_REQUIRED_PARAMS_$0> {
        return this.run<TS_REQUIRED_PARAMS_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_REQUIRED_PARAMS_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAMS_$0, };
                }
                return $$res;
            });
    }
    public matchTS_REQUIRED_PARAM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_REQUIRED_PARAM> {
        return this.run<TS_REQUIRED_PARAM>($$dpth,
            () => {
                let $$res: Nullable<TS_REQUIRED_PARAM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAM, };
                }
                return $$res;
            });
    }
    public matchTS_OPTIONAL_PARAMS($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_OPTIONAL_PARAMS> {
        return this.run<TS_OPTIONAL_PARAMS>($$dpth,
            () => {
                let $$res: Nullable<TS_OPTIONAL_PARAMS> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<TS_OPTIONAL_PARAMS_$0>(() => this.matchTS_OPTIONAL_PARAMS_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAMS, };
                }
                return $$res;
            });
    }
    public matchTS_OPTIONAL_PARAMS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_OPTIONAL_PARAMS_$0> {
        return this.run<TS_OPTIONAL_PARAMS_$0>($$dpth,
            () => {
                let $$res: Nullable<TS_OPTIONAL_PARAMS_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAMS_$0, };
                }
                return $$res;
            });
    }
    public matchTS_OPTIONAL_PARAM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_OPTIONAL_PARAM> {
        return this.run<TS_OPTIONAL_PARAM>($$dpth,
            () => {
                let $$res: Nullable<TS_OPTIONAL_PARAM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\?)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAM, };
                }
                return $$res;
            });
    }
    public matchTS_REST_PARAM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_REST_PARAM> {
        return this.run<TS_REST_PARAM>($$dpth,
            () => {
                let $$res: Nullable<TS_REST_PARAM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.\.\.)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REST_PARAM, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_MEMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER> {
        return this.choice<TS_TYPE_MEMBER>([
            () => this.matchTS_TYPE_MEMBER_1($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_2($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_3($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_4($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_5($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_TYPE_MEMBER_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER_1> {
        return this.run<TS_TYPE_MEMBER_1>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_MEMBER_1> = null;
                if (true
                    && this.matchTS_PROPERTY_NAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\??)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_MEMBER_1, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_MEMBER_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER_2> {
        return this.run<TS_TYPE_MEMBER_2>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_MEMBER_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_MEMBER_2, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_MEMBER_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER_3> {
        return this.run<TS_TYPE_MEMBER_3>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_MEMBER_3> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:new)`, "", $$dpth + 1, $$cr) !== null
                    && this.noConsume<_>(() => this.match_($$dpth + 1, $$cr)) !== null
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_MEMBER_3, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_MEMBER_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER_4> {
        return this.run<TS_TYPE_MEMBER_4>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_MEMBER_4> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_MEMBER_4, };
                }
                return $$res;
            });
    }
    public matchTS_TYPE_MEMBER_5($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_TYPE_MEMBER_5> {
        return this.run<TS_TYPE_MEMBER_5>($$dpth,
            () => {
                let $$res: Nullable<TS_TYPE_MEMBER_5> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\??)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_MEMBER_5, };
                }
                return $$res;
            });
    }
    public matchTS_PROPERTY_NAME($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PROPERTY_NAME> {
        return this.choice<TS_PROPERTY_NAME>([
            () => this.matchTS_PROPERTY_NAME_1($$dpth + 1, $$cr),
            () => this.matchTS_PROPERTY_NAME_2($$dpth + 1, $$cr),
            () => this.matchTS_PROPERTY_NAME_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_PROPERTY_NAME_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PROPERTY_NAME_1> {
        return this.matchNAME($$dpth + 1, $$cr);
    }
    public matchTS_PROPERTY_NAME_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PROPERTY_NAME_2> {
        return this.matchTS_STRING($$dpth + 1, $$cr);
    }
    public matchTS_PROPERTY_NAME_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_PROPERTY_NAME_3> {
        return this.matchTS_NUM($$dpth + 1, $$cr);
    }
    public matchTS_STRING($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_STRING> {
        return this.choice<TS_STRING>([
            () => this.matchTS_STRING_1($$dpth + 1, $$cr),
            () => this.matchTS_STRING_2($$dpth + 1, $$cr),
            () => this.matchTS_STRING_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_STRING_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_STRING_1> {
        return this.run<TS_STRING_1>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<TS_STRING_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.regexAccept(String.raw`(?:([^"\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_STRING_1, val: $scope$val};
                }
                return $$res;
            });
    }
    public matchTS_STRING_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_STRING_2> {
        return this.run<TS_STRING_2>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<TS_STRING_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\')`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.regexAccept(String.raw`(?:([^\'\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\')`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_STRING_2, val: $scope$val};
                }
                return $$res;
            });
    }
    public matchTS_STRING_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_STRING_3> {
        return this.run<TS_STRING_3>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<TS_STRING_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\`)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.regexAccept(String.raw`(?:([^\`\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\`)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_STRING_3, val: $scope$val};
                }
                return $$res;
            });
    }
    public matchTS_NUM($$dpth: number, $$cr?: ErrorTracker): Nullable<TS_NUM> {
        return this.regexAccept(String.raw`(?:-?[0-9]+(?:\.[0-9]+)?)`, "", $$dpth + 1, $$cr);
    }
    public matchCODE_SECTION($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_SECTION> {
        return this.run<CODE_SECTION>($$dpth,
            () => {
                let $scope$start: Nullable<PosInfo>;
                let $scope$end: Nullable<PosInfo>;
                let $$res: Nullable<CODE_SECTION> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\{)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$start = this.mark()) !== null
                    && ((this.matchCODE_REC($$dpth + 1, $$cr)) || true)
                    && ($scope$end = this.mark()) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CODE_SECTION, start: $scope$start, end: $scope$end};
                }
                return $$res;
            });
    }
    public matchCODE_REC($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_REC> {
        return this.loop<CODE_REC_$0>(() => this.matchCODE_REC_$0($$dpth + 1, $$cr), 0, -1);
    }
    public matchCODE_REC_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_REC_$0> {
        return this.choice<CODE_REC_$0>([
            () => this.matchCODE_REC_$0_1($$dpth + 1, $$cr),
            () => this.matchCODE_REC_$0_2($$dpth + 1, $$cr),
            () => this.matchCODE_REC_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchCODE_REC_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_REC_$0_1> {
        return this.regexAccept(String.raw`(?:[^{}\'"\`]+)`, "", $$dpth + 1, $$cr);
    }
    public matchCODE_REC_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_REC_$0_2> {
        return this.matchTS_STRING($$dpth + 1, $$cr);
    }
    public matchCODE_REC_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<CODE_REC_$0_3> {
        return this.run<CODE_REC_$0_3>($$dpth,
            () => {
                let $$res: Nullable<CODE_REC_$0_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\{)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchCODE_REC($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CODE_REC_$0_3, };
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchGRAM(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<GRAM>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}